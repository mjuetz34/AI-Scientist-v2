[
  {
    "Name": "Einfacher Klassifikationsalgorithmus Test",
    "Hypothesis": "Ein einfacher Support Vector Machine (SVM) Klassifikator kann auf dem Iris-Datensatz eine Genauigkeit von über 90% erreichen.",
    "Abstract": "Dieses Experiment testet die Performance eines SVM-Klassifikators auf dem klassischen Iris-Datensatz. Das Ziel ist es, eine Genauigkeit von über 90% zu erreichen und die Ergebnisse zu visualisieren.",
    "Motivation": "Der Iris-Datensatz ist ein Standard-Datensatz für Machine Learning Tests. Ein SVM-Klassifikator sollte gute Ergebnisse erzielen können.",
    "Method": "Wir werden einen SVM-Klassifikator mit verschiedenen Kerneln (linear, rbf, poly) trainieren und die besten Hyperparameter durch Grid Search finden.",
    "Expected Outcome": "Eine Genauigkeit von über 90% auf dem Test-Set und informative Visualisierungen der Klassifikationsgrenzen.",
    "Related Work": "Der Iris-Datensatz wurde erstmals von Fisher (1936) eingeführt und ist seitdem ein Standard-Benchmark für Klassifikationsalgorithmen.",
    "Datasets": ["iris"],
    "Metrics": ["accuracy", "precision", "recall", "f1_score"],
    "Code": "import numpy as np\nimport pandas as pd\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load the iris dataset\niris = load_iris()\nX = iris.data\ny = iris.target\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Define parameter grid for SVM\nparam_grid = {\n    'C': [0.1, 1, 10, 100],\n    'gamma': [1, 0.1, 0.01, 0.001],\n    'kernel': ['rbf', 'linear']\n}\n\n# Create SVM classifier\nsvm = SVC()\n\n# Perform grid search\ngrid_search = GridSearchCV(svm, param_grid, cv=5, scoring='accuracy')\ngrid_search.fit(X_train, y_train)\n\n# Get best model\nbest_svm = grid_search.best_estimator_\n\n# Make predictions\ny_pred = best_svm.predict(X_test)\n\n# Print results\nprint(f'Best parameters: {grid_search.best_params_}')\nprint(f'Best cross-validation score: {grid_search.best_score_:.3f}')\nprint(f'Test accuracy: {best_svm.score(X_test, y_test):.3f}')\nprint('\\nClassification Report:')\nprint(classification_report(y_test, y_pred, target_names=iris.target_names))\n\n# Create confusion matrix plot\nplt.figure(figsize=(8, 6))\ncm = confusion_matrix(y_test, y_pred)\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', \n            xticklabels=iris.target_names, \n            yticklabels=iris.target_names)\nplt.title('Confusion Matrix')\nplt.ylabel('True Label')\nplt.xlabel('Predicted Label')\nplt.tight_layout()\nplt.savefig('confusion_matrix.png')\nplt.show()"
  }
]